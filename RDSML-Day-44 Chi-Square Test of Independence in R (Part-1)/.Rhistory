5+6
setwd("~/")
# Importing the dataset
tooth_data = ToothGrowth
# Creating a function for summarizing the data
# based on the grouping variables
data_summary = function(data, varname, groupnames){
require(plyr)
summary_func = function(x, col){
c(mean = mean(x[[col]], na.rm = TRUE), sd = sd(x[[col]], na.rm = TRUE))
}
data_sum = ddply(data, groupnames, .fun = summary_func, varname)
data_sum = rename(data_sum, c("mean" = varname))
return(data_sum)
}
d_summary = data_summary(tooth_data, varname = "len", groupnames = c("supp", "dose"))
View(tooth_data)
# data_sum = rename(data_sum, c("mean" = varname))
return(all_summary)
data_summary = function(data, varname, groupnames){
require(plyr)
summary_func = function(x, col){
c(mean = mean(x[[col]], na.rm = TRUE), sd = sd(x[[col]], na.rm = TRUE))
}
all_summary = ddply(data, groupnames, .fun = summary_func, varname)
# data_sum = rename(data_sum, c("mean" = varname))
return(all_summary)
}
d_summary = data_summary(tooth_data, varname = "len", groupnames = c("supp", "dose"))
View(d_summary)
View(tooth_data)
data_summary = function(data, varname, groupnames){
require(plyr)
summary_func = function(x, col){
c(mean = mean(x[[col]], na.rm = TRUE), sd = sd(x[[col]], na.rm = TRUE))
}
all_summary = ddply(data, groupnames, .fun = summary_func, varname)
data_sum = rename(all_summary, c("mean" = varname))
return(data_sum)
}
d_summary = data_summary(tooth_data, varname = "len", groupnames = c("supp", "dose"))
d_summary = data_summary(tooth_data, varname = "len", groupnames = c("supp", "dose"))
# Converting 'dose' to a factor variable
d_summary$dose = as.factor(d_summary$dose)
class(d_summary$dose)
# Standard deviation of the mean as error bar with explanation
library(ggplot2)
ggplot(d_summary)
ggplot(d_summary, aes(x = dose, y = len))
ggplot(d_summary, aes(x = dose, y = len))+
geom_bar(stat = "identity")
ggplot(d_summary, aes(x = dose, y = len, fill = supp))+
geom_bar(stat = "identity")
ggplot(d_summary, aes(x = dose, y = len, fill = supp))+
geom_bar(stat = "identity", position = position_dodge())
ggplot(d_summary, aes(x = dose, y = len, fill = supp))+
geom_bar(stat = "identity", position = position_dodge())
ggplot(d_summary, aes(x = dose, y = len, fill = supp))+
geom_bar(stat = "identity", position = position_dodge())+
geom_errorbar(aes(ymin = len - sd, ymax = len + sd))
ggplot(d_summary, aes(x = dose, y = len, fill = supp))+
geom_bar(stat = "identity", position = position_dodge())+
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2)
ggplot(d_summary, aes(x = dose, y = len, fill = supp))+
geom_bar(stat = "identity", position = position_dodge())+
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge())
ggplot(d_summary, aes(x = dose, y = len, fill = supp))+
geom_bar(stat = "identity", position = position_dodge())+
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(1))
ggplot(d_summary, aes(x = dose, y = len, fill = supp))+
geom_bar(stat = "identity", position = position_dodge())+
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9))
ggplot(d_summary, aes(x = dose, y = len, fill = supp))+
geom_bar(stat = "identity", position = position_dodge())+
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9))+
theme_minimal()
setwd("~/")
setwd("D:/R/R-for-Data-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8/RDSML-Day-44 Chi-Square Test of Independence in R (Part-1)")
setwd("D:/R/R-for-Data-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8/RDSML-Day-44 Chi-Square Test of Independence in R (Part-1)")
# Importing the dataset
housetasks <- read.delim("housetasks.txt", row.names = 1)
# Contingency table can be visualized using the function
# balloonplot(). This function draws a graphical matrix where
# each cell contains a dot whose size reflects the relative
# magnitude of the corresponding component.
install.packages("gplots")
# install.packages("gplots")
library("gplots")
dt <- as.table(as.matrix(housetasks))
balloonplot(t(dt), main = "Housetasks Visualization",
label = F, show.margins = F,
xlab = "", ylab = "")
# It's also possible to visualize a contingency table
# as a mosaic plot. This can be done using the function
# mosaicplot() from the built-in R package graphics.
library("graphics")
mosaicplot(dt, shade = T, las = 2,
main = "Housetasks")
# Blue color indicates that the observed value is higher
# than the expected value. Red color indicates that the
# observed value is lower than the expected value.
# Computing chi-square test in R
chisq <- chisq.test(housetasks)
chisq
# Observed counts
chisq$observed
# Expected counts
round(chisq$expected,2)
