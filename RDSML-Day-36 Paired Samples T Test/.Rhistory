5+6
setwd("~/")
# Importing the dataset
tooth_data = ToothGrowth
# Creating a function for summarizing the data
# based on the grouping variables
data_summary = function(data, varname, groupnames){
require(plyr)
summary_func = function(x, col){
c(mean = mean(x[[col]], na.rm = TRUE), sd = sd(x[[col]], na.rm = TRUE))
}
data_sum = ddply(data, groupnames, .fun = summary_func, varname)
data_sum = rename(data_sum, c("mean" = varname))
return(data_sum)
}
d_summary = data_summary(tooth_data, varname = "len", groupnames = c("supp", "dose"))
View(tooth_data)
# data_sum = rename(data_sum, c("mean" = varname))
return(all_summary)
data_summary = function(data, varname, groupnames){
require(plyr)
summary_func = function(x, col){
c(mean = mean(x[[col]], na.rm = TRUE), sd = sd(x[[col]], na.rm = TRUE))
}
all_summary = ddply(data, groupnames, .fun = summary_func, varname)
# data_sum = rename(data_sum, c("mean" = varname))
return(all_summary)
}
d_summary = data_summary(tooth_data, varname = "len", groupnames = c("supp", "dose"))
View(d_summary)
View(tooth_data)
data_summary = function(data, varname, groupnames){
require(plyr)
summary_func = function(x, col){
c(mean = mean(x[[col]], na.rm = TRUE), sd = sd(x[[col]], na.rm = TRUE))
}
all_summary = ddply(data, groupnames, .fun = summary_func, varname)
data_sum = rename(all_summary, c("mean" = varname))
return(data_sum)
}
d_summary = data_summary(tooth_data, varname = "len", groupnames = c("supp", "dose"))
d_summary = data_summary(tooth_data, varname = "len", groupnames = c("supp", "dose"))
# Converting 'dose' to a factor variable
d_summary$dose = as.factor(d_summary$dose)
class(d_summary$dose)
# Standard deviation of the mean as error bar with explanation
library(ggplot2)
ggplot(d_summary)
ggplot(d_summary, aes(x = dose, y = len))
ggplot(d_summary, aes(x = dose, y = len))+
geom_bar(stat = "identity")
ggplot(d_summary, aes(x = dose, y = len, fill = supp))+
geom_bar(stat = "identity")
ggplot(d_summary, aes(x = dose, y = len, fill = supp))+
geom_bar(stat = "identity", position = position_dodge())
ggplot(d_summary, aes(x = dose, y = len, fill = supp))+
geom_bar(stat = "identity", position = position_dodge())
ggplot(d_summary, aes(x = dose, y = len, fill = supp))+
geom_bar(stat = "identity", position = position_dodge())+
geom_errorbar(aes(ymin = len - sd, ymax = len + sd))
ggplot(d_summary, aes(x = dose, y = len, fill = supp))+
geom_bar(stat = "identity", position = position_dodge())+
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2)
ggplot(d_summary, aes(x = dose, y = len, fill = supp))+
geom_bar(stat = "identity", position = position_dodge())+
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge())
ggplot(d_summary, aes(x = dose, y = len, fill = supp))+
geom_bar(stat = "identity", position = position_dodge())+
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(1))
ggplot(d_summary, aes(x = dose, y = len, fill = supp))+
geom_bar(stat = "identity", position = position_dodge())+
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9))
ggplot(d_summary, aes(x = dose, y = len, fill = supp))+
geom_bar(stat = "identity", position = position_dodge())+
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9))+
theme_minimal()
setwd("D:/R/R-for-Data-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8/RDSML-Day-36 Paired Samples T Test")
# Paired Samples T-Test in R
# Importing the dataset
myDataset <- read.csv("paired-samples-t-test")
# Paired Samples T-Test in R
# Importing the dataset
myDataset <- read.csv("paired-samples-t-test.csv")
View(myDataset)
# Calculating the difference
diffs <- myDataset$carb - myDataset$carb_protein
diffs
# Checking if the differences are normally distributed
shapiro.test(diffs)
# Checking for outliers using boxplot
boxplot(diffs)
# Running the Paired t-Test
t.test(x = myDataset$carb, y = myDataset$carb_protein, paired = TRUE)
# Running the Wilcoxon signed-rank Test
wilcox.test(x = myDataset$carb, y = myDataset$carb_protein, paired = TRUE)
# Calculating mean and sd
mean(myDataset$carb)
mean(myDataset$carb_protein)
sd(myDataset$carb)
sd(myDataset$carb_protein)
install.packages("effsize")
# install.packages("effsize")
library(effsize)
cohen.d(myDataset$carb_protein, myDataset$carb, paired = TRUE)
